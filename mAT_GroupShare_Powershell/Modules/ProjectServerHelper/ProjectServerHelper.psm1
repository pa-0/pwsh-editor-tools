param ($server = "https://{groupshare-host}}/") # change this with the actual server


# Endpoints used by this module
$projectsEndpoint = "$server/api/projectserver/v2/projects";
$analysisReportEndpoint = "$server/api/projectserver/v3/projects";

<#
    .SYNOPSIS
    Get analysis report as XML or JSON file from a project.

    .DESCRIPTION
    Generate an analysis report on a specified language, or, if the language is not provided, for all the languages from a given projects
    and writes the output to the given path, where the given path should be a non-existing file json or xml file, otherwise it will override
    the existing file.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the analysis reports will be generated.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project
    
    .PARAMETER outputFile
    Represents the physical location to the file where the content will be written.

    Can be an existing file and it will be overritten when the function finishes.

    .PARAMETER languageCode
    Optionally, the language code can be provided so the reports will only target the specified language

    Example of language code is "en-US"

    .EXAMPLE
    Get-AnalysisReport -authorizationToken "SampleTokenGenerated" -project $existingProjectObject
    -outputFile "D:\Location\To\NonExistingFile.xml"

    Creates the above file and writes the generated report as xml.

    .EXAMPLE
    Get-AnalysisReport -authorizationToken "SampleTokenGenerated" -project $existingProjectObject
    -outputFile "D:\Location\To\NonExistingFile.json"

    Creates the above file and writes the generated report as json.

    .EXAMPLE    
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-AnalysisReport -authorizationToken $token -project $project -outputFile "D:\Documents\report.json"

    .EXAMPLE    
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-AnalysisReport -authorizationToken $token -project $project -outputFile "D:\Documents\report.xml"

    .EXAMPLE    
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-AnalysisReport -authorizationToken $token -project $project -outputFile "D:\Documents\report.xml" -languageCode "de-DE"

    .NOTES
    Using this function with an invalid authorizationToken, incorrect object for project or incorrect languageCode
    will return the error message of this endpoint.
#>
function Get-AnalysisReports
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [String] $outputFile,

        [String] $languageCode = $null 
    )

    $uri = $analysisReportEndpoint + "/" + $project.ProjectId + "/analysisreports";
    $headers = FormatHeaders $authorizationToken;
    if ($languageCode)
    {
        $uri += "/$languageCode";
    }

    $response =  Invoke-Method { Invoke-RestMethod -Uri $uri -Headers $headers } 
    if ($null -eq $response)
    {
        return;
    }

    $report = $response.Report;
    if ($outputFile -like "*.json")
    {
        $output = ConvertTo-Json $report -Depth 100
    }
    else 
    {
        $output = ConvertTo-XML $report -Depth 100 -As String
    }

    $output | Out-File -FilePath $outputFile -Force -Encoding UTF8
    Write-Host "Analysis report created at $outputFile" -ForegroundColor Green
}

<#
    .SYNOPSIS
    Gets the pta report and exports it to the given location.
    .SYNOPSIS
    Get analysis report as XML or JSON file from a project.

    .DESCRIPTION
    Generate an analysis report on a specified language, or, if the language is not provided, for all the languages from a given projects
    and writes the output to the given path, where the given path should be a non-existing file json or xml file, otherwise it will override
    the existing file.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the analysis reports will be generated.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project
    
    .PARAMETER languageCode
    Represents the target language code for the pta report.

    E.g "de-DE"

    .PARAMETER outputLocation
    Represents the physical location where the report will be saved.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"    
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"


    Get-PtaReport -authorizationToken $token -project $project -languageCode "de-DE" -outputLocation "D:\Documents\ptareport.csv"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"    
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-PtaReport -authorizationToken $token -project $project -languageCode "de-DE" -outputLocation "D:\Documents\ptareport"
#>
function Get-PtaReport 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [Psobject] $project,

        [Parameter(Mandatory=$true)]
        [string] $languageCode,

        [Parameter(Mandatory=$true)]
        [string] $outputLocation
    )

    $uri = $server + "api/projectserver/v3/reports/pta/" + $project.ProjectId;
    $headers = FormatHeaders $authorizationToken;

    $csvExt = ".csv"
    if ($outputLocation.EndsWith($csvExt) -eq $false)
    {
        $outputLocation += $csvExt;
    }

    if ($languageCode)
    {
        $uri += "/$languageCode"
    }

    $response = Invoke-Method { Invoke-RestMethod -uri $uri -Headers $headers }
    if ($null -eq $response)
    {
        return;
    }

    # Initialize an array to hold the CSV data
    $csvData = @()

    foreach ($fileReport in $response.filePostTranslationReports) {
        $fileName = $fileReport.fileName
        $languageCode = $fileReport.languageCode
        
        foreach ($userData in $fileReport.reportContent.userData) {
            $user = $userData.user
            $matchData = $userData.matchData
            
            # Add entries for specific match categories
            $categories = @{
                "PerfectMatch" = $matchData.perfectMatch
                "Context Match" = $matchData.inContextMatch
                "100%" = $matchData.exactMatch
                "Automated Translation" = $matchData.automatedTranslation
                "Machine Translation" = $matchData.machineTranslation
                "New" = $matchData.new
            }
            
            foreach ($category in $categories.Keys) {
                $segments = $categories[$category].segments
                $words = $categories[$category].words
                $characters = $categories[$category].characters
                
                $csvEntry = [PSCustomObject]@{
                    "File Name"                       = $fileName
                    "Language Code"                   = $languageCode
                    "Match Category"                  = $category
                    "${user} - Segments"              = $segments
                    "${user} - Words"                 = $words
                    "${user} - Characters"            = $characters
                }
                $csvData += $csvEntry
            }
    
            # Add entries for fuzzy matches
            $fuzzyMatches = $matchData.fuzzyMatch
            foreach ($fuzzyMatch in $fuzzyMatches) {
                $category = "$($fuzzyMatch.analysisBand.minimumMatchValue)%-$(($fuzzyMatch.analysisBand.maximumMatchValue))%"
                $segments = $fuzzyMatch.countData.segments
                $words = $fuzzyMatch.countData.words
                $characters = $fuzzyMatch.countData.characters
                
                $csvEntry = [PSCustomObject]@{
                    "File Name"                       = $fileName
                    "Language Code"                   = $languageCode
                    "Match Category"                  = $category
                    "${user} - Segments"              = $segments
                    "${user} - Words"                 = $words
                    "${user} - Characters"            = $characters
                }
                $csvData += $csvEntry
            }
        }
    }

    $csvData | Export-Csv -Path $outputLocation;
}

<#
    .SYNOPSIS
    Exports the Audit Trail to the given location as a csv file.
    .SYNOPSIS
    Get analysis report as XML or JSON file from a project.

    .DESCRIPTION
    Generate an analysis report on a specified language, or, if the language is not provided, for all the languages from a given projects
    and writes the output to the given path, where the given path should be a non-existing file json or xml file, otherwise it will override
    the existing file.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the audit trail report will be generated.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project
    
    .PARAMETER outputLocation
    Represents the physical location where the file will be created.

#>
function Get-AuditTrails 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [Psobject] $project,

        [Parameter(Mandatory=$true)]
        [string] $outputLocation
    )

    $uri = $server + "api/projectserver/v2/auditTrail/languageFiles/" + $project.ProjectId;
    $headers = FormatHeaders $authorizationToken;
    $csvExt = ".csv"
    if ($outputLocation.EndsWith($csvExt) -eq $false)
    {
        $outputLocation += $csvExt;
    }

    $response = Invoke-Method { Invoke-RestMethod -uri $uri -Headers $headers }
    if ($null -eq $response)
    {
        return
    }

    $csvData = @()

    foreach ($languageFile in $response) {
        $languageFileId = $languageFile.LanguageFile.LanguageFileId
        $fileName = $languageFile.LanguageFile.FileName
        $languageCode = $languageFile.LanguageFile.LanguageCode
    
        foreach ($trail in $languageFile.Trails) {
            $csvEntry = [PSCustomObject]@{
                "Language File Id" = $languageFileId
                "Language Code"    = $languageCode
                "File Name"        = $fileName
                "Version"          = $trail.Version
                "Action"           = $trail.Action
                "Time"             = $trail.Timestamp
                "User"             = $trail.User
                "New Phase"        = $trail.NewPhase
                "DueDate"          = $trail.DueDate
                "Assignees"        = $($trail.Assignees -join ", ")
                "Comment"          = $trail.Comment
            }
            $csvData += $csvEntry
        }
    }
    
    $csvData | Export-Csv -Path $outputLocation;
}

<#
    .SYNOPSIS
    Returns all the created projects from the server.

    .DESCRIPTION
    This method returns a list with all the created projects that are on the server, including projects within child organiations.
    The list returned is represented as a list of powershell objects.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER includeSubOrganizations
    (Optional) A boolean value indicating whether to include the projects within suborganizations

    .PARAMETER organization
    (Optional) Represents the organization as a psobject.
    If this parameter is provided all the projects within this organization will be retrieved.
    Optionally includes the projects within the suborganization if the $includeSubOrganizations parameter is set to $true

    Can be retriever from:
        Get-AllOrganizations
        Get-Organization
        New-Organization
        Update-Organization

    For further documentation see:
        Get-Help Get-AllOrganizations
        Get-Help Get-Organization
        Get-Help New-Organization
        Get-Help Update-Organization

    .PARAMETER publishStart
    (Optional) the publish start date. 
    By default this value is 7 days prior to the current date.

    The value is expected to be in the format: yyyy-MM-dd
    Example: 2024-03-24

    .PARAMETER publishEnd
    (Optional) the publish end date. 
    By default this value is set to the current date.

    The value is expected to be in the format: yyyy-MM-dd
    Example: 2024-03-24

    .PARAMETER dueStart
    (Optional) the due start date. 
    By default this value is 7 days prior to the current date.

    The value is expected to be in the format: yyyy-MM-dd
    Example: 2024-03-24

    .PARAMETER dueEnd
    (Optional) the due end date. 
    By default this value is 190 days after to the current date.

    The value is expected to be in the format: yyyy-MM-dd
    Example: 2024-03-24

    .PARAMETER statuses
    (Optional) Represents the projects statuses.
    Only the projects with these statuses will be retrieved.

    Expected value should be one or more of the following strings:
    Pending
    Completed
    In Progress
    Archived
    Detaches

    .PARAMETER defaultPublishDates
    (Optional) A boolean value whether to get the default publish dates or remove the publish dates filter

    .PARAMETER defaultDueDates
    (Optional) A boolean value whether to get the default due dates or remove the dates dates filter

    .PARAMETER sortProperty
    (Optional) The sort property
    Expected value is one of the following strings
	ProjectName
    CreatedAt
    DueDate
    CustomerName
    Status
    SourceLanguage
    OrganizationPath

    .PARAMETER sortDirection
    (Optional) The Sort direction
    Expected value is one of the following strings:
    ASC
    DESC

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    Get-AllProjects -authorizationToken $token

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    Get-AllProjects -authorizationToken $token -publishStart "2024-07-03" -publishEnd "2024-08-08" -defaultPublishDates $false

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    Get-AllProjects -authorizationToken $token -defaultPublishDates $false -defaultDueDates $false 

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    Get-AllProjects -authorizationToken $token -defaultPublishDates $false -defaultDueDates $false 
        -organization $organization -includeSubOrganizations $false

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    Get-AllProjects -authorizationToken $token -defaultPublishDates $false -defaultDueDates $false 
        -statuses @("Pending", "Completed", "In Progress", "Archived", "Detaches") -sortProperty "ProjectName"
        -sortDirection "DESC"

    .NOTES
    Using an invalid authorizationToken will return the error mesage received from the endpint.
#>
function Get-AllProjects
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [bool] $includeSubOrganizations = $true,
        [psobject] $organization = $null,
        [string] $publishStart = $null,
        [string] $publishEnd = $null,
        [string] $dueStart = $null,
        [string] $dueEnd = $null,
        [string[]] $statuses = $null,
        [bool] $defaultPublishDates = $true,
        [bool] $defaultDueDates = $true,
        [string] $sortProperty = $null,
        [string] $sortDirection = $null
        )

    $headers = FormatHeaders $authorizationToken;

    if ($sortProperty -and $sortDirection)
    {
        $sort = @(
            [psobject]@{
            "property" = $sortProperty
            "direction" = $sortDirection
        })
    }

    $limit = [int]::MaxValue
    $queryString = Get-QueryStringForProjectForListing $page $start $limit $includeSubOrganizations $organization $defaultPublishDates $publishStart $publishEnd $defaultDueDates $dueStart $dueEnd $statuses $sort
    $uri = $projectsEndpoint + "?" + $queryString
    $response = Invoke-Method -functionToExecute { Invoke-RestMethod -Uri $uri -Headers $headers }
    if ($response)
    {
        return $response.Items
    }

    return $null
}

<#
    .SYNOPSIS
    Change the status of a project to either completed or started.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents the project object as a powershell object that will be used for updating the status.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER status
    Represents the new value of the project status
    Values expected are:
    Completed
    Started  

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Update-ProjectStatus -authorizationToken $token -project $project -status "Completed"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Update-ProjectStatus -authorizationToken $token -project $project -status "Started"
#>
function Update-ProjectStatus 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,
        
        [Parameter(Mandatory=$true)]
        [psobject] $project, 
        
        [Parameter(Mandatory=$true)]
        [String] $status)

    $uri = $projectsEndpoint + "/" + $project.ProjectId + "/changestatus/"
    $headers = FormatHeaders $authorizationToken;
    switch ($status) {
        "Completed" { $uri += $status }
        "Started" {$uri += $status }
        Default { return }
    }

    return Invoke-Method { Invoke-RestMethod -uri $uri -Method Put -Headers $headers }
}

<#
    .SYNOPSIS
    Returns a specific projects if it exists.

    .DESCRIPTION
    This method returns the project that matches the project name or project id, prioritizing the project id. 
    Returns a project as a powershell object.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER projectName
    The name of the project.

    .PARAMETER projectId
    The unique id of the project.

    .EXAMPLE
    Get-Project -authorizationToken "SampleAuthorizationToken" -ProjectId "ID-OF-Project"

    Returns the existing project with the specified id

    .EXAMPLE


    Get-Project -authorizationToken "SampleAuthorizationToken" -ProjectName "Sample Project" -ProjectId "ID-OF-Project"

    Returns the existing project with the specified id

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    Get-Project -authorizationToken $token -ProjectName "Sample Project"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    Get-Project -authorizationToken $token -ProjectId "f9a6e0c0-70b6-4f24-87a1-d066f5baf12b"

    .OUTPUTS
    [PSObject]
    This method returns a psobject representing the found project or $null if the project was not found.

    .NOTES
    Using an invalid authorizationToken or requesting a project that does not exist will return the error mesage received from the endpint.
#>
function Get-Project
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [String] $projectName = $null,
        [String] $projectId = $null)

    if ($projectId)
    {
        $uri = $projectsEndpoint + "/$projectId";
        $headers = FormatHeaders $authorizationToken;
        
        return Invoke-Method { Invoke-RestMethod -Uri $uri -Headers $headers }
    }

    return Get-ProjectByName $authorizationToken $projectName;
}


<#
    .SYNOPSIS
    Creates a new project

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER projectName
    Represents the name of the project

    .Parameter organization
    Represents the organization which will own the project  as a powershell object.

    See:
    Get-Help Get-AllOrganizations;
    Get-Help Get-Organization;

    .PARAMETER projectTemplate
    Represents the project template to be used as a powershell object

    See:
    Get-Help Get-AllProjectTemplates;
    Get-Help Get-ProjectTemplate;    
    
    .PARAMETER filesPath
    Represents the location of the files to be added for translation.

    Can be: 
    -single translatable file.
    -zip file containing multiple files
    -directory containing the translatable files.

    .PARAMETER description
    Optionally, the project description can be provided

    .PARAMETER dueDate
    Optionally the due date of the project as a string

    Can be written for dates only or dates with time
    Date format is yyyy-mm-dd
    E.G 2024-03-24

    Date with time format is yyyy-mm-ddThh:mm
    E.G 2024-03-24T12:00

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    $projectTemplate = Get-ProjectTemplate -authorizationToken $token -templateName "Sample Template"

    New-Project -authorizationToken $token -projectName "Sample Project" -organization $organization
        -projectTemplate $projectTemplate -filesPath "D:\Path\To\Files"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    $projectTemplate = Get-ProjectTemplate -authorizationToken $token -templateName "Sample Template"

    New-Project -authorizationToken $token -projectName "Sample Project" -organization $organization
        -projectTemplate $projectTemplate -filesPath "D:\Path\To\Files.zip"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $organization = Get-Organization -authorizationToken $token -organizationName "Root Organization"
    $projectTemplate = Get-ProjectTemplate -authorizationToken $token -templateName "Sample Template"
    $referenceProject = Get-Project -authorizationToken $token -projectName "Existing Project"

    New-Project -authorizationToken $token -projectName "Sample Project" -organization $organization
        -projectTemplate $projectTemplate -filesPath "D:\Path\To\Files.zip" -description "Api Made project"
        -dueDate "2025-03-24" -restrictFileDownloads $true -referenceProject $referenceProject

    .NOTES
    Using invalid parameters and invalid authorizationToken will return the error message for this endpoint.
#>
function New-Project {
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [String] $projectName,

        [Parameter(Mandatory=$true)]
        [PSObject] $organization,

        [Parameter(Mandatory=$true)]
        [PSObject] $projectTemplate,

        [Parameter(Mandatory=$true)]
        [String] $filesPath,

        [String] $description = $null,
        [String] $dueDate = $null,
        [Bool] $restrictFileDownloads = $false,
        [psobject] $referenceProject = $null
    )

    $project = @{
        "Name" = $projectName
        "OrganizationId" = $organization.UniqueId
        "Description" = $description
        "ProjectTemplateId" = $projectTemplate.Id
        "DueDate" = $dueDate
        "IsSecure" = $restrictFileDownloads
    }

    if ($referenceProject)
    {
        $project.ReferenceProjects = @($referenceProject | ForEach-Object { @{ "ReferenceProjectId" = $_.ProjectId } })
    }

    $uri = $projectsEndpoint;
    $body = ConvertTo-Json $project;

    $headers = FormatHeaders $authorizationToken;
    $form = @{ "Files" = $null};

    if ($(Test-Path -Path $filesPath) -eq $false) 
    {
        Write-Host "Path does not exist" -ForegroundColor Green;
        return;
    }
    elseif (Test-Path -Path $filesPath -PathType Container) {
        $items = Get-ChildItem -Path $filesPath -Recurse;
        if ($items.Count -eq 0)
        {
            Write-Host "The directory should not be empty" -ForegroundColor Green;
            return;
        }

        $form.Files = $items
    } else {
        $form.Files = Get-Item -Path $filesPath;
    }

    $projectId = Invoke-Method { Invoke-RestMethod -Uri $uri -Body $body -Headers $headers -Method Post -AllowInsecureRedirect }
    if ($null -eq $projectId)
    {
        return;
    }

    $uriToAddFiles = $projectsEndpoint + "/$projectId/files/upload?create=false";
    $uriToCreate = $projectsEndpoint + "/$projectId/create"
    
    Invoke-Method { Invoke-RestMethod -Uri $uriToAddFiles -Form $form -Headers $headers -Method Post -AllowInsecureRedirect }
    Invoke-Method { Invoke-RestMethod -Uri $uriToCreate -Method Post -Headers $headers -AllowInsecureRedirect }
}

<#
    .SYNOPSIS
    Removes the specified project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER ProjectToRemove
    Represents a project object that will be removed from the server.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Remove-Project -authorizationToken $token -project $project

    .NOTES
    Using this function with an invalid authorizationToken will return the error message for this endpoint.

    Using an existing or non-existing project will display the same output but the existing projects will be removed.
#>
function Remove-Project 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project)

    $uri = $projectsEndpoint + "/" + $project.ProjectId;
    $headers = FormatHeaders $authorizationToken;    

    Invoke-Method { Invoke-RestMethod -Uri $uri -Headers $headers -Method Delete }
}

<#
    .SYNOPSIS
    Returns a list with all the available phases for the projects.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    The project to get the phases from
    
    See:
        Get-Help Get-AllProject
        Get-Help Get-Project

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-ProjectPhases -authorizationToken $token -project $project

    .OUTPUTS
    [PSObject]
    This method returns a collection of psobjects representing all the project phases
#>
function Get-ProjectPhases 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken, 

        [Parameter(Mandatory=$true)]
        [psobject] $project
    )

    $uri = $server + "api/projectserver/v2" + "/phases/" + $project.ProjectId;
    $headers = FormatHeaders $authorizationToken;

    return Invoke-Method { Invoke-RestMethod -uri $uri -Headers $headers }
}

<#
    .SYNOPSIS
    Returns a list with all the files with their current phase state.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    The project to get the files phases from.
    
    See:
        Get-Help Get-AllProject
        Get-Help Get-Project

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-FilesPhasesFromProject -authorizationToken $token -project $project

    .OUTPUTS
    [PSObject[]]
    This method returns a collection of psobjects representing all the files from the phase view.

#>
function Get-FilesPhasesFromProject 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [psobject] $project
    )

    $phases = Get-ProjectPhases $authorizationToken $project
    $headers = FormatHeaders $authorizationToken;

    $files = @()
    foreach ($phase in $phases)
    {
        $uri = [string]$server + "api/projectserver/v2" + "/projects/" + $project.ProjectId + "/phaseswithassignees/" + $phase.ProjectPhaseId;
        $items = Invoke-Method  { Invoke-RestMethod -uri $uri -Headers $headers }
        $items = $items | Where-Object {$_.CurrentPhaseId -eq $phase.ProjectPhaseId }
        $files += $items;
    }

    return $files;
}

<#
    .SYNOPSIS
    Changes the files phases to the new provided one.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    The project that contains the files.
    
    See:
        Get-Help Get-AllProject
        Get-Help Get-Project

    .PARAMETER files
    Represents the files for which the status will be updated
    See:
        Get-Help Get-FilesPhasesFromProject

    .PARAMETER newPhase
    Represents the new phase of the given files

    See: 
        Get-Help Get-ProjectPhases

    .EXAMPLE 
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project  
    $phases = Get-FilesPhasesFromProject -authorizationToken $token -project $project  

    Update-ProjectFilesPhase -authorizationToken $token -project $project -files @($filesFromPhaseView[0], $filesFromPhaseView[1])
        -newPhase $phases[1]

    .EXAMPLE 
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project  
    $phases = Get-FilesPhasesFromProject -authorizationToken $token -project $project  

    Update-ProjectFilesPhase -authorizationToken $token -project $project -files @($filesFromPhaseView[0], $filesFromPhaseView[1])
        -newPhase $phases[1] -comment "Sample comment"

    .PARAMETER comment
    Optional parameter, represents the comment for the update.
#>
function Update-ProjectFilesPhase 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [psobject] $project,

        [Parameter(Mandatory=$true)]
        [psobject[]] $files,

        [Parameter(Mandatory=$true)]
        [psobject] $newPhase,

        [String] $comment = $null
    )

    $uri = $projectsEndpoint + "/" + $project.ProjectId + "/changephase";
    $headers = FormatHeaders $authorizationToken;
    $body = @{
        "Comment" = $comment
        "Files" = @()
    }

    foreach ($file in $files)
    {
        $body.Files += @{
             "LanguageFileId" = $file.FileUniqueId 
             "PhaseId" = $newPhase.ProjectPhaseId
            }
    }

    $json = $body | ConvertTo-Json -Depth 10
    return Invoke-Method { Invoke-RestMethod -uri $uri -Method Post -body $json -headers $headers }
}

<#
    .SYNOPSIS
    Changes the files assignees and or the delivery date of the given files.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    The project that contains the files.
    
    See:
        Get-Help Get-AllProject
        Get-Help Get-Project

    .PARAMETER files
    Represents the files for which the status will be updated
    See:
        Get-Help Get-FilesPhasesFromProject;

    .PARAMETER updatedAssignees
    Represents a list of users that will be set as the files assignees.

    See:
        Get-AllUsers
        Get-User

    .PARAMETER deliveryAt
    Represents the new delivery date for the files

    .PARAMETER comment
    Additionally, the comment for the update.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project
    $newUser = Get-User -authorizationToken $token -userName "johndoe@email.com"
    
    Update-ProjectFilesPlanning -authorizationToken $token -project $project
    -files @($filesFromPhaseView[0], $filesFromPhaseView[1]) -filesFromPhaseView @($newUser)

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project
    $newUser = Get-User -authorizationToken $token -userName "johndoe@email.com"
    $otherUser = Get-User -authorizationToken $token -userName "jamesdoe@email.com"

    Update-ProjectFilesPlanning -authorizationToken $token -project $project
        -files @($filesFromPhaseView[0], $filesFromPhaseView[1]) updatedAssignees @($newUser)


    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project
    $newUser = Get-User -authorizationToken $token -userName "johndoe@email.com"
    $otherUser = Get-User -authorizationToken $token -userName "jamesdoe@email.com"

    Update-ProjectFilesPlanning -authorizationToken $token -project $project
        -files @($filesFromPhaseView[0], $filesFromPhaseView[1]) -updatedAssignees @($newUser, $otherUser)
        -deliveryAt "2025-03-24" -commen "Sample Comment"
#>
function Update-ProjectFilesPlanning 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSobject] $project, 

        [Parameter(Mandatory=$true)]
        [PSobject[]] $files,

        [PSobject[]] $updatedAssignees = $null,
        [String] $deliveryAt = $null,
        [String] $comment = $null
    )

    $uri = $projectsEndpoint + "/" + $project.ProjectId + "/changeassignment";
    $headers = FormatHeaders $authorizationToken;
    
    # here i want to use the files phase instead of fileinfo

    $body = @{
        "Comment" = $comment
    }

    $userNames = $updatedAssignees | ForEach-Object { $_.Name }
    $filesInfo = Get-ProjectFilesInfo $authorizationToken $project;
    
    $filesBody = @();
    foreach ($file in $files)
    {
        $fileBody = [ordered]@{
            "LanguageFileId" = $file.FileUniqueId
            "PhaseId" = $file.CurrentPhaseId
            "DueDate" = $file.DueDate
        }

        if ($updatedAssignees)
        {
            $fileBody.AssignedUsers = @($userNames)
        }
        else 
        {
            $fileWithAssignees = $filesInfo | Where-Object { $_.UniqueId -eq $file.FileUniqueId } | Select-Object -First 1
            $fileAssignee = @($fileWithAssignees.Assignees | ForEach-Object { $_.UserName })
            $fileBody.AssignedUsers = $fileAssignee
        }
        if ($dueDate)
        {
            $file.DueDate = $dueDate
        }

        $filesBody += $fileBody;
    }

    $body.Files = @($filesBody)
    $json = $body | ConvertTo-Json -Depth 5;

    return  Invoke-Method { Invoke-RestMethod -uri $uri -Method Post -body $json -headers $headers }
}

<#
    .SYNOPSIS
    Gets the project settings for the provided project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    Project to get the settings from.

    See:
        Get-Help Get-AllProject
        Get-Help Get-Help

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -ProjectName "Sample Project"

    Get-ProjectSettings -authorizationToken $token -project $project

    .OUTPUTS
    [PSObject]
    This method returns a psobject representing the settings for an existing project.
#>
function Get-ProjectSettings 
{
    param (
        [parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [parameter(Mandatory=$true)]
        [psobject] $project
    )

    $uri = $server + "api/projectserver/v4/projects/" +  $project.ProjectId + "/settings"
    $headers = FormatHeaders $authorizationToken;
    return Invoke-Method {Invoke-RestMethod -uri $uri -Headers $headers}
}

<#
    .SYNOPSIS
    Download the template used for creating the given project.
    
    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    Existing project as a powershell object.

    See:
        Get-Help Get-AllProject
        Get-Help Get-Help


    .PARAMETER outputPath
    Represents the physical path of the file that will be created.

    Must end with .sdltpl

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Export-TemplateUsedForProjectCreation -authorizationToken $token -project $project -outputPath "D:\Documents\template.sdltpl"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Export-TemplateUsedForProjectCreation -authorizationToken $token -project $project -outputPath "D:\Documents\template"

    
#>
function Export-TemplateUsedForProjectCreation 
{
    
    param (
        [parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [parameter(Mandatory=$true)]
        [psobject] $project,

        [parameter(Mandatory=$true)]
        [string] $outputPath 
    )

    
    $uri = $server + "api/projectserver/v2/projects/" +  $project.ProjectId + "/settings/downloadtemplate";
    $templateExt = ".sdltpl"

    if ($outputPath.EndsWith($templateExt) -eq $false)
    {
        $outputPath += $templateExt;
    }
    $headers = FormatHeaders $authorizationToken;

    Invoke-Method { Invoke-RestMethod -uri $uri -Headers $headers -OutFile $outputPath }
}

<#
    .SYNOPSIS
    Imports a return pacakge to an existing project.

    .DESCRIPTION
    Imports a physical return package with the default settings to the given project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object that will import the return package.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER packagePath
    Represents the physical location of the package.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Import-Package -authorizationToken $token -project $project -packagePath "D:\Documents\import.sdlrpx"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Import-Package -authorizationToken $token -project $project -packagePath "D:\Documents\import"
#>
function Import-Package
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [String] $packagePath)

    $uri = $server + "/api/projectserver/v3/package/import/" + $project.ProjectId;
    $importExt = ".sdlrpx"
    if ($packagePath.EndsWith($importExt) -eq $false)
    {
        $packagePath += $importExt;
    }

    $headers = FormatHeaders $authorizationToken;
    $form = @{
        "file" = Get-Item -Path $packagePath    
    }

    return Invoke-Method {Invoke-RestMethod -Uri $uri -Headers $headers -Form $form -Method Post}
}

<#
    .SYNOPSIS 
    Export the package from the specified project to the specified location for all the languages.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which to export the package.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER packageDestinationPath
    Represents the location where the export will be created.

    .PARAMETER files
    Represents the file from the phase view as a collection of psobjects

    Can be retrieved from:
        Get-FilesPhasesFromProject;
    
    See:
        Get-Help Get-FilesPhasesFromProject;

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Export-Package -authorizationToken $token -project $project -packageDestinationPath "D:\Path\To\import.sdlppx"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Export-Package -authorizationToken $token -project $project -packageDestinationPath "D:\Path\To\import"

    
    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project  

    Export-Package -authorizationToken $token -project $project -packageDestinationPath "D:\Documents\export" 
        -files @($filesFromPhaseView[0], $filesFromPhaseView[1])
#>
function Export-Package 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [String] $packageDestinationPath,
        
        [psobject[]] $files = @())

    $uri = $server + "/api/projectserver/v3/package/export";
    $exportExt = ".sdlppx"
    if ($packageDestinationPath.EndsWith($exportExt) -eq $false) 
    {
        $packageDestinationPath += $exportExt
    }

    $headers = FormatHeaders $authorizationToken;
    $body = @{
        "ProjectId" = $project.ProjectId;
        "languageFileIds" = @()
    }

    if ($files)
    {
        $body.languageFileIds = @($files | ForEach-Object { $_.FileUniqueId })
    }

    $body = ConvertTo-Json $body;

    $task = Invoke-Method { Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body }
    Get-Package $headers $task $packageDestinationPath;
}

<#
    .SYNOPSIS
    Adds translatable or refrence files to an existing project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object to upload the files to.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER filesPath
    Physical location of the files.

    Can be:
    - A single translatable file
    - A zip file
    - A Folder

    .PARAMETER isReference
    A boolean value indicating whether the files are treated as reference or translatable files.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Add-FilesToProject -authorizationToken $token -project $project -filesPath "D:\Path\To\Files"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Add-FilesToProject -authorizationToken $token -project $project -filesPath "D:\Path\To\Files\containingzip.zip"

    
    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Add-FilesToProject -authorizationToken $token -project $project -filesPath "D:\Path\To\Files\containingzip.zip"
        -isReference $true
#>
function Add-FilesToProject
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [String] $filesPath,

        [Bool] $isReference = $false
    )

    $headers = FormatHeaders $authorizationToken
    $uri = $server + "/api/projectserver/v4/projects/" + $project.ProjectId + "/update";
    $form = @{
        "Files" = $null
    }

    if (Test-Path $filesPath -PathType Container) {
        $form.Files = Get-ChildItem -Path $filesPath -Recurse;
    } else {
        $form.Files = Get-Item -Path $filesPath;
    }

    if ($isReference)
    {
        $uri += "?reference=true"
    }

    return Invoke-Method {Invoke-RestMethod -Uri $uri -Headers $headers -Method Post -Form $form}
}

<#
    .SYNOPSIS
    Sync the files from the given location with the files from the project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    Represents the project that will be used for the update process as a powershell object.

    See:
        Get-Help Get-AllProjects
        Get-Help Get-Project

    .PARAMETER filesPath
    Represents the path to the files.

    The path can be a folder, a single file or a zip file.

    .PARAMETER isReference
    Optionally, a boolean value indicating whether the specified files are reference files.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Update-ProjectFiles -authorizationToken $token -project $project -filesPath "D:\Path\To\Files"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Update-ProjectFiles -authorizationToken $token -project $project -filesPath "D:\Path\To\Files" -isReference $true

    .NOTES
    The $isReference parameter should be set to $true when the files that should be udpated are references in the project.
#>
function Update-ProjectFiles 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [String] $filesPath,

        [Bool] $isReference = $false
    )

    $headers = FormatHeaders $authorizationToken
    $uri = $server + "/api/projectserver/v4/projects/" + $project.ProjectId + "/update";
    $form = @{
        "Files" = $null
    }

    if (Test-Path $filesPath -PathType Container) {
        $form.Files = Get-ChildItem -Path $filesPath -Recurse;
    } else {
        $form.Files = Get-Item -Path $filesPath;
    }

    if ($isReference)
    {
        $uri += "?reference=true"
    }

    return Invoke-Method {Invoke-RestMethod -Uri $uri -Headers $headers -Method Put -Form $form}
}

<#
    .SYNOPSIS
    Cancel the given files from the given project.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER project
    Represents the project that will be used for the update process as a powershell object.

    See:
        Get-Help Get-AllProjects
        Get-Help Get-Project

    .PARAMETER files
    Represents the files that will be canceled as an array of powershell objects.

    See:
        Get-Help Get-ProjectFilesInfo  

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $files = Get-ProjectFilesInfo -authorizationToken $token -project $project

    Set-CancelStatusToProjectFiles -authorizationToken $token -project $project -files @($files[0], $files[1])
#>
function Set-CancelStatusToProjectFiles 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSObject] $project,

        [Parameter(Mandatory=$true)]
        [PSObject[]] $files)

    $headers = FormatHeaders $authorizationToken
    $uri = $server + "/api/projectserver/v4/projects/" + $project.ProjectId + "/setFileCancelStatus";
    $body = @{
        "fileIds" = @($files | ForEach-Object { $_.UniqueId })
    }

        $json = $body | ConvertTo-Json -Depth 3;

    return Invoke-Method { Invoke-RestMethod -Uri $uri -Headers $headers -Method Put -Body $json }
}


<#
    .SYNOPSIS
    Gets all the projects file and returns a zip file.

    .DESCRIPTION
    This function gets all the project files and write the output at the given location.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the files will be downloaded from.

    A project object can be generated by Get-AllProjects, Get-Project.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER outputLocation
    Represents the path where the file will be created or overwritten if exists already.

    Must have the .zip extension.

    Eg: projectfiles.zip

    .PARAMETER projectfiles
    Represents the project file to be scoped for the download.

    See:
        Get-Help Get-FilesPhasesFromProject;

    .PARAMETER type
    A value indicating whether this function should return for all files or for native files only.
    Expected value is
    targetnativefiles
    all

    .PARAMETER includeTMs
    A boolean value indicating whether to include the translation memories or not.

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Save-AllProjectsFile -authorizationToken $token -project $project -outputLocation "D:\Documents\files.zip"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Save-AllProjectsFile -authorizationToken $token -project $project -outputLocation "D:\Documents\files"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Save-AllProjectsFile -authorizationToken $token -project $project -outputLocation "D:\Documents\files" -type "targetnativefiles"

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Save-AllProjectsFile -authorizationToken $token -project $project -outputLocation "D:\Documents\files" -type "targetnativefiles"
        -includeTMs $true

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project  

    Save-AllProjectsFile -authorizationToken $token -project $project -outputLocation "D:\Documents\files" -type "targetnativefiles"
        -includeTMs $true -projectFiles @($filesFromPhaseView[0], $filesFromPhaseView[1])

#>
function Save-AllProjectsFile 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSOBject] $project,

        [Parameter(Mandatory=$true)]
        [String] $outputLocation,

        [psobject[]] $projectfiles,
        [string] $type = "all",
        [bool] $includeTMs = $false
        ) 

    $uri = $projectsEndpoint + "/" + $project.ProjectId + "/download"
    $zipExt = ".zip"
    if ($outputLocation.EndsWith($zipExt) -eq $false)
    {
        $outputLocation += $zipExt;
    }

    if ($projectfiles)
    {
        $query = $projectfiles | ForEach-Object { "languageFileIds=$($_.FileUniqueId)"}
        $languageQuery = $query -join "&"

        $uri += "?$languageQuery"
        if ($type -eq "targetnativefiles" -and $includeTMs)
        {
            $uri += "&nativeFiles=true&updateTms=true"
        }
        elseif ($type -eq "targetnativefiles") {
            $uri += "&nativeFiles=true"
        }
    }
    else {
        $uri += "/$type";
        if ($type -eq "targetnativefiles" -and $includeTMs)
        {
            $uri += "?updateTms=true"
        }
    }

    $headers = FormatHeaders $authorizationToken;
    return Invoke-Method {Invoke-RestMethod -Uri $uri -Headers $headers -OutFile $outputLocation};
}

<#
    .SYNOPSIS
    Returns a list with all the projects files information.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the files will be returned from  from.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .EXAMPLE
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"

    Get-ProjectFilesInfo -authorizationToken $token -project $project

    .OUTPUTS
    [PSObjects]
    This method returns a collection of psobjects representing the files from the files view from the project.
#>
function Get-ProjectFilesInfo 
{
    param(
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [PSOBject] $project
    )

    $uri = $projectsEndpoint + "/" + $project.ProjectId + "/files"
    $headers = FormatHeaders $authorizationToken

    return Invoke-Method {Invoke-RestMethod -Uri $uri -Headers $headers}
}

<#
    .SYNOPSIS
    Generates the creation of a new Post Translation Report.

    .PARAMETER authorizationToken
    Represents the security token that allows user to access sensitive resources. 

    Can be generated by SignIn function.

    See Get-Help SignIn for further documentation.

    .PARAMETER Project
    Represents a project object from which the pts report will be generated.

    See:
    Get-Help Get-AllProjects
    Get-Help Get-Project

    .PARAMETER files
    Optionally, some files from the project can be provided so the function will create a report only for the given files.

    See:
        Get-Help Get-FilesPhasesFromProject

    .EXAMPLE 
    $token = SignIn -userName "username" -password "password"
    $project = Get-Project -authorizationToken $token -projectName "Sample Project"
    $filesFromPhaseView = Get-FilesPhasesFromProject -authorizationToken $token -project $project  

    New-PostTranslationReport -authorizationToken $token -project $project -files $filesFromPhaseView

    .NOTES
    This method schedules the PostTranslationReport creation.
#>
function New-PostTranslationReport 
{
    param (
        [Parameter(Mandatory=$true)]
        [String] $authorizationToken,

        [Parameter(Mandatory=$true)]
        [psobject] $project,

        [psobject[]] $files = $null
    )

    $uri = $server + "api/projectserver/v3/reports/pta";
    $headers = FormatHeaders $authorizationToken;
    $body = @{
        "projectId" = $project.ProjectId
        "languageFileIds" = @()
    }

    if ($files)
    {
        $body.languageFileIds = $files | ForEach-Object { $_.FileUniqueId };
    }

    $json = $body | ConvertTo-Json -Depth 10
    return Invoke-Method {Invoke-RestMethod -uri $uri -Headers $headers -Method Post -Body $json}
}

function Get-Package
{
    param (
        [psobject] $headers,
        [String] $taskId,
        [String] $path)

    $statusUri = $server + "/api/projectserver/v3/package/export/status/$taskId";
    $status = Invoke-RestMethod -Uri $statusUri -Headers $headers;

    while ($true)
    {
        $status = Invoke-RestMethod -Uri $statusUri -Headers $headers;

        if ($status.Status -eq "Done")
        {
            return Invoke-RestMethod -uri $($server + "/api/projectserver/v3/package/export/$taskId") -Headers $headers -OutFile $path;
        }
    
    }
}

function Get-ProjectByName
{
    param(
        [String] $authorizationToken,
        [String] $projectName)

    $projects = Get-AllProjects $authorizationToken -defaultPublishDates $false -defaultDueDates $false -statuses @("Pending", "In Progress", "Completed", "Archived", "Detached");

    foreach ($project in $projects)
    {
        if ($project.Name -eq $projectName)
        {
            return $project;
        }
    }

    return $null;
}

function FormatHeaders 
{
    param ([String] $token)

    return @{
        "Authorization" = "Bearer $token"
        "Content-Type" = "application/json"
        "Accept" = "application/json"
    }
}

function FormatTMs
{
    param(
        [psobject] $organization,
        [psobject[]] $tms
    )

    $output = @();

    foreach ($tm in $tms)
    {
        $tmModel = @{
            "uri" = FormatTMUri $tm.Name $organization.Path
            "scope" = @()
            "overrideParent" = $true
            "id" = $tm.TranslationMemoryId
        }

        $output += $tmModel;
    }

    return $output;
}

function FormatTMUri 
{
    param(
        [String] $tmName,
        [String] $orgPath)

    $baseUri = "sdltm." + $server + "/"
    $uriBuilder = New-Object System.UriBuilder($baseUri);
    $query = "orgPath=$orgPath&tmName=$tmName"
    $uriBuilder.Query = $query;

    return $uriBuilder.Uri;
}

function Get-DefaultSegmentLockingSettings
{
    return @{
        "useAndCondition" = $false
        "translationStatuses" = @("ApprovedSignOff", "ApprovedTranslation", "Translated")
        "translationOrigins" = @("TranslationMemory", "NeuralMachineTranslation")
        "score" = 100
        "mtqe" = @("Good")
        "targetLanguage" = ""
    }
}

function Get-QueryStringForProjectForListing 
{
    param (
        [int] $page = 1,
        [int] $start = 0,
        [int] $limit = 100,
        [bool] $includeSubOrganizations = $true,
        [psobject] $organization = $null,
        [bool] $defaultPublishDates = $true,
        [string] $publishStart = $null,
        [string] $publishEnd = $null,
        [bool] $defaultDueDates = $true,
        [string] $dueStart = $null,
        [string] $dueEnd = $null,
        [string[]] $statuses = $null,

        [psobject[]] $sort = $null
    )

    $query = [ordered] @{
        "page" = $page
        "start" = $start 
        "limit" = $limit
    }

    $query.filter = [ordered] @{
        "includeSubOrgs" = $includeSubOrganizations.ToString()
    }

    if ($defaultPublishDates)
    {
        $publishDates = Get-DefaultPublishDate;
        $query.filter.publishStart = $publishDates.startDate
        $query.filter.publishEnd = $publishDates.endDate
    }
    elseif ($(IsDateFormat $publishStart) -eq $true -or $(IsDateFormat $publishEnd) -eq $true)
    {
        $query.filter.publishStart = $publishStart
        $query.filter.publishEnd = $publishEnd
    }
    else 
    {
        $query.filter.publishStart = ""
        $query.filter.publishEnd = ""
    }

    if($defaultDueDates)
    {
        $dueDate = Get-DefaultDueDates;
        $query.filter.dueStart = $dueDate.startDate
        $query.filter.dueEnd = $dueDate.endDate
    }
    elseif ($(IsDateFormat $dueStart) -eq $true -or $(IsDateFormat $dueEnd) -eq $true)
    {
        $query.filter.dueStart = $dueStart
        $query.filter.dueEnd = $dueEnd
    }
    else {
        $query.filter.dueStart = ""
        $query.filter.dueEnd = ""
    }

    if ($statuses)
    {
        $query.filter.status = Get-StatusInteger $statuses;
    }
    else 
    {
        $query.filter.status = Get-StatusInteger @("Pending", "In Progress", "Completed")
    }
    
    if ($organization)
    {
        $query.filter.orgPath = $organization.Path
    }
    else 
    {
        $query.filter.orgPath = "/"
    }

    $jsonFilter = $query.Filter | ConvertTo-Json -Compress;
    if ($sort.Count -eq 1)
    {
        $jsonSort = $sort | ConvertTo-Json -Compress;
        $stringQuery = "page=$page&start=$start&limit=$limit&sort=$([System.Web.HttpUtility]::UrlEncode($jsonSort))&filter=$([System.Web.HttpUtility]::UrlEncode($jsonFilter))"
    }
    else 
    {
        $stringQuery = "page=$page&start=$start&limit=$limit&filter=$([System.Web.HttpUtility]::UrlEncode($jsonFilter))"
    }

    return $stringQuery;
}

function Get-DefaultPublishDate 
{
    $endDate = Get-Date;
    $startDate = $endDate.AddDays(-7)

    return @{
        "startDate" = $startDate.ToString("yyyy-MM-dd")
        "endDate" = $endDate.ToString("yyyy-MM-dd")
    }
}

function Get-StatusInteger
{
    param ([String[]] $statusesStrings)

    $status = 0;
    foreach ($statusString in $statusesStrings)
    {
        switch ($statusString) {
            "Pending" { $status += 1}
            "In Progress" { $status += 2}
            "Completed" { $status += 4 }
            "Archived" { $status += 8 }
            "Detaches" { $status += 16 }
            Default { $status += 0}
        }
    }

    return $status;
}

function Get-DefaultDueDates 
{
    $currentDate = Get-Date
    $startDate = $currentDate.AddDays(-7)
    $endDate = $startDate.AddDays(190)

    return @{
        "startDate" = $startDate.ToString("yyyy-MM-dd")
        "endDate" = $endDate.ToString("yyyy-MM-dd")
    }
}

function IsDateFormat {
    param ([String] $inputString)
    
    $pattern = "^(\d{4})-(\d{2})-(\d{2})$"

    return $inputString -match $pattern
}

function Invoke-Method 
{
    param (
        [scriptblock] $functionToExecute
    )

    try {
        return & $functionToExecute
    }
    catch 
    {
        Write-Host "Error occured: $_"
        return $null
    }
}

Export-ModuleMember Get-AllProjects;
Export-ModuleMember Get-Project;
Export-ModuleMember New-Project;
Export-ModuleMember Remove-Project;
Export-ModuleMember Get-ProjectPhases;
Export-ModuleMember Get-ProjectSettings;
Export-ModuleMember Get-FilesPhasesFromProject;
Export-ModuleMember Update-ProjectStatus;
Export-ModuleMember Update-ProjectFilesPhase;
Export-ModuleMember Update-ProjectFilesPlanning;
Export-ModuleMember Set-CancelStatusToProjectFiles;
Export-ModuleMember Get-AnalysisReports;
Export-ModuleMember Get-PtaReport;
Export-ModuleMember Get-AuditTrails;
Export-ModuleMember Export-TemplateUsedForProjectCreation;
Export-ModuleMember Import-Package;
Export-ModuleMember Export-Package;
Export-ModuleMember Add-FilesToProject;
Export-ModuleMember Update-ProjectFiles;
Export-ModuleMember Save-AllProjectsFile;
Export-ModuleMember New-PostTranslationReport;
Export-ModuleMember Get-ProjectFilesInfo;